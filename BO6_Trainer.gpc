// BO6 Trainer (OLED Menu + Aim Assist + Dynamic Anti-Recoil + Rapid Fire)
// Controller: PS5 (mapped as PS4 constants)
// Show/Hide Menu: Touchpad + Options
// Navigate: L1/R1 | Adjust: Dpad Up/Down | Exit/Save: Circle | Toggle RF: Triangle

int AA_STRENGTH = 12;     // 0..30
int AR_BASE_Y   = 18;     // 0..60
int AR_BASE_X   = 0;      // -30..30
int RF_DELAY    = 55;     // 15..120 ms
int RF_ENABLED  = 1;      // 1=on, 0=off

define AA_MIN = 0;  define AA_MAX = 30;
define ARY_MIN = 0; define ARY_MAX = 60;
define ARX_MIN = -30; define ARX_MAX = 30;
define RF_MIN = 15; define RF_MAX = 120;

define ADS = PS4_L2;
define FIRE = PS4_R2;
define L1 = PS4_L1;
define R1 = PS4_R1;
define TOUCH = PS4_TOUCH;
define OPTIONS = PS4_OPTIONS;
define UP = PS4_UP; define DOWN = PS4_DOWN;
define LEFT = PS4_LEFT; define RIGHT = PS4_RIGHT;
define CROSS = PS4_CROSS; define CIRCLE = PS4_CIRCLE;

int menu_on = FALSE;
int sel = 0; // 0=AA, 1=AR_Y, 2=AR_X, 3=RF_DELAY, 4=RF_ON
int tick;

define OLED_SMALL = 0;
define WHITE = 1; define BLACK = 0;

init {
    AA_STRENGTH = get_pvar(SPVAR_1, AA_MIN, AA_MAX, AA_STRENGTH);
    AR_BASE_Y   = get_pvar(SPVAR_2, ARY_MIN, ARY_MAX, AR_BASE_Y);
    AR_BASE_X   = get_pvar(SPVAR_3, ARX_MIN, ARX_MAX, AR_BASE_X);
    RF_DELAY    = get_pvar(SPVAR_4, RF_MIN, RF_MAX, RF_DELAY);
    RF_ENABLED  = get_pvar(SPVAR_5, 0, 1, RF_ENABLED);
    cls_oled(BLACK);
    draw_oled_header();
    draw_oled_menu();
}

main {
    if (get_val(TOUCH) && event_press(OPTIONS)) {
        menu_on = !menu_on;
        if (menu_on) {
            cls_oled(BLACK);
            draw_oled_header();
            draw_oled_menu();
        } else {
            save_pvars();
            flash_ok();
            cls_oled(BLACK);
        }
    }

    if (menu_on) {
        handle_menu_input();
        set_val(FIRE, 0);
        set_val(ADS, 0);
        return;
    }

    if (get_val(ADS) > 10) {
        aim_assist_micro();
    }

    if (get_val(FIRE) > 10) {
        dynamic_antirecoil();
        if (RF_ENABLED) combo_run(RAPID_FIRE);
    } else {
        combo_stop(RAPID_FIRE);
    }
}

combo RAPID_FIRE {
    set_val(FIRE, 100);
    wait(20);
    set_val(FIRE, 0);
    wait(RF_DELAY);
}

void dynamic_antirecoil() {
    tick = (get_rtime() / 80) % 6;
    fix32 dyn = AR_BASE_Y + tick;
    fix32 ry = get_val(PS4_RY) + dyn;
    if (ry > 100) ry = 100;
    set_val(PS4_RY, ry);

    fix32 rx = get_val(PS4_RX) + AR_BASE_X;
    if (rx > 100) rx = 100; if (rx < -100) rx = -100;
    set_val(PS4_RX, rx);
}

void aim_assist_micro() {
    int s = AA_STRENGTH;
    if (s <= 0) return;
    int phase = (get_rtime() / 40) % 4;
    int rx = get_val(PS4_RX);
    int ry = get_val(PS4_RY);

    if (phase == 0)      { rx += s; }
    else if (phase == 1) { ry += s; }
    else if (phase == 2) { rx -= s; }
    else                 { ry -= s; }

    clamp_stick(rx, ry);
    set_val(PS4_RX, rx);
    set_val(PS4_RY, ry);
}

void clamp_stick(int &x, int &y) {
    if (x > 100) x = 100;
    if (x < -100) x = -100;
    if (y > 100) y = 100;
    if (y < -100) y = -100;
}

void handle_menu_input() {
    if (event_press(R1)) { sel++; if (sel > 4) sel = 0; draw_oled_menu(); }
    if (event_press(L1)) { sel--; if (sel < 0) sel = 4; draw_oled_menu(); }

    if (event_press(UP)) {
        adjust_selected(+1);
        draw_oled_menu();
        rumble_tick();
    }
    if (event_press(DOWN)) {
        adjust_selected(-1);
        draw_oled_menu();
        rumble_tick();
    }

    if (event_press(PS4_TRIANGLE)) {
        RF_ENABLED = RF_ENABLED ? 0 : 1;
        draw_oled_menu();
        rumble_tick();
    }

    if (event_press(CIRCLE)) {
        menu_on = FALSE;
        save_pvars();
        flash_ok();
        cls_oled(BLACK);
    }
}

void adjust_selected(int dir) {
    if (sel == 0) { AA_STRENGTH += dir; if (AA_STRENGTH < AA_MIN) AA_STRENGTH = AA_MIN; if (AA_STRENGTH > AA_MAX) AA_STRENGTH = AA_MAX; }
    if (sel == 1) { AR_BASE_Y   += dir; if (AR_BASE_Y   < ARY_MIN) AR_BASE_Y   = ARY_MIN; if (AR_BASE_Y   > ARY_MAX) AR_BASE_Y   = ARY_MAX; }
    if (sel == 2) { AR_BASE_X   += dir; if (AR_BASE_X   < ARX_MIN) AR_BASE_X   = ARX_MIN; if (AR_BASE_X   > ARX_MAX) AR_BASE_X   = ARX_MAX; }
    if (sel == 3) { RF_DELAY    += dir * 5; if (RF_DELAY < RF_MIN) RF_DELAY = RF_MIN; if (RF_DELAY > RF_MAX) RF_DELAY = RF_MAX; }
    if (sel == 4) { RF_ENABLED  = RF_ENABLED ? 0 : 1; }
}

void draw_oled_header() {
    rect_oled(0, 0, 128, 12, 1, WHITE);
    cls_puts();
    putstr("BO6 TRAINER");
    puts_oled(2, 2, OLED_SMALL, 12, BLACK);
}

void draw_oled_menu() {
    rect_oled(0, 13, 128, 51, 1, BLACK);
    draw_menu_line(0, "AA  :", AA_STRENGTH, (sel==0));
    draw_menu_line(1, "AR_Y:", AR_BASE_Y,   (sel==1));
    draw_menu_line(2, "AR_X:", AR_BASE_X,   (sel==2));
    draw_menu_line(3, "RFms:", RF_DELAY,    (sel==3));
    draw_menu_line(4, "RFON:", RF_ENABLED,  (sel==4));
}

void draw_menu_line(int row, char *label, int value, int active) {
    int y = 15 + row*10;
    if (active) rect_oled(0, y-1, 128, 10, 0, WHITE);
    cls_puts();
    putlabel(row);
    puts_oled(4, y, OLED_SMALL, _puts_len, active?BLACK:WHITE);
    cls_puts();
    putnum(value);
    int len = _puts_len;
    int x = 128 - (len * 7) - 4;
    puts_oled(x, y, OLED_SMALL, len, active?BLACK:WHITE);
}

int _puts_len = 0;
void cls_puts() { _puts_len = 0; }
void putchr(int ascii) { _puts_len++; putc_oled(_puts_len, ascii); }

#define PUTSTR_AA()     putchr('A');putchr('A');putchr(' ');putchr(' ');putchr(':')
#define PUTSTR_AR_Y()   putchr('A');putchr('R');putchr('_');putchr('Y');putchr(':')
#define PUTSTR_AR_X()   putchr('A');putchr('R');putchr('_');putchr('X');putchr(':')
#define PUTSTR_RFMS()   putchr('R');putchr('F');putchr('m');putchr('s');putchr(':')
#define PUTSTR_RFON()   putchr('R');putchr('F');putchr('O');putchr('N');putchr(':')

void putlabel(char idx) {
    if (idx==0) { PUTSTR_AA(); }
    if (idx==1) { PUTSTR_AR_Y(); }
    if (idx==2) { PUTSTR_AR_X(); }
    if (idx==3) { PUTSTR_RFMS(); }
    if (idx==4) { PUTSTR_RFON(); }
}

void putnum(int v) {
    if (v < 0) { putchr('-'); v = -v; }
    int d100 = v/100;
    int d10  = (v/10)%10;
    int d1   = v%10;
    if (d100) putchr('0'+d100);
    if (d100 || d10)  putchr('0'+d10);
    putchr('0'+d1);
}

int strlen(char *fake) { return _puts_len; }
int numlen(int v) { if (v < 0) v = -v; if (v >= 100) return 3; if (v >= 10) return 2; return 1; }

void save_pvars() {
    set_pvar(SPVAR_1, AA_STRENGTH);
    set_pvar(SPVAR_2, AR_BASE_Y);
    set_pvar(SPVAR_3, AR_BASE_X);
    set_pvar(SPVAR_4, RF_DELAY);
    set_pvar(SPVAR_5, RF_ENABLED);
}

void flash_ok() {
    set_rgb(0,100,0);
    combo_run(RUMBLE_OK);
}
void rumble_tick() { combo_run(RUMBLE_TICK); }
combo RUMBLE_OK { set_rumble(RUMBLE_A, 50); wait(200); reset_rumble(); }
combo RUMBLE_TICK { set_rumble(RUMBLE_B, 40); wait(80); reset_rumble(); }
